import java.util.regex.Matcher
import java.util.regex.Pattern
import java.net.HttpURLConnection
import java.util.Date;

def duration = manager.build.getDurationString().replaceAll(/ and counting/, '')
if(duration) {
    manager.addShortText(duration, "grey", "white", "0px", "white")
}

def get_build_time() {
    start_time        = manager.build.getStartTimeInMillis()
    end_time         = new Date().getTime()
    return String.valueOf((end_time - start_time)/1000)
}

// Assemble metrics to post to build metrics server

app_server     = "http://dagr.delivery.puppetlabs.net:4567/overview/metrics"
task_metrics   = manager.build.getEnvironment(manager.listener)['METRICS']
charset           = "UTF-8"

// Maintain backwards compatibility
if ( task_metrics == null) {
    build_user       = "N/A"
    version           = "N/A"
    pe_version      = "N/A"
    dist                 = "N/A"
} else {
    build_user       = task_metrics.split("~")[0]
    version           = task_metrics.split("~")[1]
    pe_version      = task_metrics.split("~")[2]
    dist                 = task_metrics.split("~")[3]
}

build_time        = get_build_time()
package_name = manager.build.getEnvironment(manager.listener)['PROJECT']
build_loc          = manager.build.getEnvironment(manager.listener)['NODE_NAME']
build_log          = "${manager.build.getEnvironment(manager.listener)['BUILD_URL']}" + "consoleText"
success            = String.valueOf(manager.build.result)

String query = String.format("package_name=%s&dist=%s&build_user=%s&build_loc=%s&version=%s&pe_version=%s&success=%s&build_log=%s&build_time=%s", 
     URLEncoder.encode(package_name, charset),
     URLEncoder.encode(dist, charset), 
     URLEncoder.encode(build_user, charset), 
     URLEncoder.encode(build_loc, charset), 
     URLEncoder.encode(version, charset), 
     URLEncoder.encode(pe_version, charset), 
     URLEncoder.encode(success, charset), 
     URLEncoder.encode(build_log, charset), 
     URLEncoder.encode(build_time, charset))

// Make sure the server is listening before attempting to post data

URLConnection connection = null
serverAlive = false
try {
    URL u = new URL(app_server);
    connection = (HttpURLConnection) u.openConnection();
    connection.setRequestMethod("GET");
    int code = connection.getResponseCode();
    serverAlive = true
    connection.disconnect();

} catch (MalformedURLException e) {
    serverAlive = false
    e.printStackTrace()

} catch (IOException e) {
    serverAlive = false
    e.printStackTrace()

} finally {
    if (serverAlive == true) {
        connection = new URL(app_server).openConnection()
        connection.setDoOutput(true) // Triggers POST.
        connection.setRequestProperty("Accept-Charset", charset);
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=" + charset);
        OutputStream output = null;

        try {
             output = connection.getOutputStream()
             output.write(query.getBytes(charset)) 
             InputStream response = connection.getInputStream()
        } finally {
             if (output != null) try { output.close(); } catch (IOException logOrIgnore) {}
        }
    }
}
